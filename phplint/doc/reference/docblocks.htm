<HTML>
<HEAD>
<TITLE>PHPLint Reference Manual</TITLE>
<META name=description content="PHPLint Reference Manual">
<META name=author      content="icosaedro.it di Umberto Salsi">
<META name=owner       content="icosaedro.it di Umberto Salsi">
<META HTTP-EQUIV="Content-Language"    content="en">
<LINK rel=stylesheet type='text/css' href='../styles.css'>
<script type="text/javascript" src="../utils.js"></script>
</HEAD><BODY onload="buildTOC('toc');">

<h2 id="toc">DocBlocks</h2>

<p>
DocBlocks are multi-line comments properly formatted from which
PHPLint acquires the detailed description of the PHP item defined below it,
including constants, variables, functions and classes.
</p>


<a name=whatisadocblock></a>
<h2>What is a DocBlock</h2>

<p>
Constants, variables, functions, classes, class constants, properties
and methods can be preceded by a multi-line comment properly formatted.
The symbol <code><b>/**</b></code> marks the beginning of the DocBlock:
</p>

<div class="code_box">
<pre>
/**   Two asterisks after the slash mark the beginning of the DocBlock.  */
</pre>
</div>

<p>
Every line of the DocBlock may begin with an optional asterisk "*", which is ignored and discarded:
</p>

<div class="code_box">
<pre>
/**
 * The asterisk at the beginning of every line has only an
 * aesthetic purpose and, if present, is ignored and will
 * not be rendered in the generated document.
 */
</pre>
</div>

<p>
Every line, leading asterisk and the possible next space apart, is the
content of the DocBlock. The structure of a DocBlock consists of three
sections: the short description, the long description and the line tags, in
this order.
</p>

<div class="code_box">
<pre>
/**
 * The first sentence is the short description. Any text that
 * follows up to the first line tag is the long description.
 * The short description should be short, possibly incomplete
 * but meaningful, usually not longer than one line of text.
 * @param int $i  A line that begins with @ is a line tag.
 * @return void  And this is another line tag.
 */
</pre>
</div>

<p>
The <b>short description</b> starts at the first non-empty line and spans
up to the first empty line, the end of the DocBlock or the first period not
included inside a word. If the short description so determined results
to be more than 3 lines long, only the first line is taken.  If the short
description is terminated by a period, the period itself is removed.
</p>

<p>
All the text between the short description and the first line tag or the end of
the DocBlock is the <b>long description</b>.
</p>

<p>
The short description, the long description and the descriptive text allowed in
some of the line tags can contain a subset of the HTML entities as listed
below:
</p>

<blockquote>
<code>
&lt;b&gt; &lt;i&gt; &lt;code&gt; &lt;br&gt; &lt;kbd&gt; &lt;p&gt; &lt;pre&gt;
&lt;ul&gt; &lt;ol&gt; &lt;li&gt;
</code>
</blockquote>

<p>
Currently PHPLint does not allow upper-case letter, nor it allows
spaces inside the tags, so take care to write them exactly as indicated here
otherwise they would be signaled as errors.
Moreover, PHPLint checks for proper usage of these entities,
and raises an error on unclosed tags, wrong nesting, badly formed
punctuated lists, etc.
</p>

<p>
The following tag and special sequences are additions of PHPLint and may be
incompatible with other documentation systems:

<blockquote>
	<p>
	Single Unicode characters can be entered as "<code>&amp;#123;</code>" in
	decimal notation, or as "<code>&amp;#x1ab;</code>" in hexadecimal notation.
	For example, the asterisk is <code>&amp;#42;</code>.
	</p>

	<p>
	Others tag specific of PHPLint:
	<p>
	<code>
	&lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; &lt;h6&gt;
	&lt;u&gt;
	&lt;sub&gt;
	&lt;sup&gt;
	&lt;blockquote&gt;
	&lt;center&gt;
	</code>
</blockquote>

<p>
These tags, and only these, can be used to format the text of the long
description.
Any other entity or special character including <code>&lt; &gt;
&amp;</code> gets rendered literally (i.e. <code>&lt;</code> is converted
to <code>&amp;lt;</code> and so on).

<p>
The text enclosed between <code>&lt;pre&gt;</code> and
<code>&lt;/pre&gt;</code> is always rendered literally.
</p>

<p>
The <b>line tags</b> are all the lines with a leading "@" (extra spaces and
tabulations between the asterisk and the "@" are ignored).
The first line tag found opens the line tags section of the DocBlock.
</p>



<h2>What can be commented with a DocBlock</h2>

<p>
	PHPLint recognizes DocBlocks for: package, constants, global variables,
	functions, classes and interfaces, class constants, properties and
	methods.
</p>

<p>
The other elements of the source that <u>cannot be documented</u>
and PHPLint signals an error because the DocBlock is not used:<br>
the <code>namespace</code> statement,<br>
the <code>use</code> statement,<br>
the <code>declare</code> statement,<br>
the <code>include</code>, <code>include_once</code>, <code>require</code> statements.
</p>


<h3>Documenting a package</h3>

<p>
	A PHP source file can contain only one package DocBlock. A package
	DocBlock is a DocBlock containing the <code>@package</code> line tag;
	this latter line-tag is then the only mandatory line-tag in this kind
	of DocBlock.
	Example:
</p>


<div class="code_box"><pre>
/**
 * Utility functions.
 * @author Umberto Salsi
 * @package utils
 */
</pre></div>

<p>
	The name chosen for the package has not particular meaning for PHPLint
	and currently is used only to give a title to the HTML generated for
	that package.
</p>


<h3>Documenting a constant</h3>

<p>
	Constants can be defined with the <code>define();</code> statement
	or the <code>const</code> statement. There are no
	mandatory line-tags. The type of the constant is guessed from the
	expression assigned.
	Example:
</p>

<div class="code_box"><pre>
/**
 * Popular value of "PI".
 */
define("PI_POPULAR", 3.14);

/**
 * Root of the library files.
 */
const LIBS = __DIR__ . "/../../libs";

/**
 * Format of the file.
 */
const TEXT_FMT = 0, TEXT_EXT = ".txt",
      HTML_FMT = 1, HTML_EXT = ".html",
      PDF_FMT = 3,  PDF_EXT = ".pdf";
</pre></div>

<p>
	If the <code>const</code> statement defines 2 or more constants
	in a list of comma separated assignments, then the same DocBlock applies
	to all these constants; each constant may have its own different type.
</p>


<h3>Documenting a variable</h3>

<p>
	Only variables at global scope can be documented, and the statement that
	follows must be the assignment of their initial value.
	The <code>@var TYPE</code> line tag is not mandatory and can be
	added to define the detailed structure of the type when it cannot be
	guessed from the type of the expression.
	Examples:
</p>

<div class="code_box"><pre>
/**
 * Current number of records read.
 */
$record_read_no = 0;

/**
 * Collected users' names as UTF-8 strings.
 * @var string[int]
 */
$users_names = array();

/**
 * Peer input socket.
 * @var resource
 */
$peer_in_socket = NULL;

/**
 * Collected exceptions to be reported at the end of the program.
 * @var Exception[int]
 */
$exceptions = array();

/**
 * Rotational 3x3 matrix.
 */
$rotation = array(
	array(1.0, 0.0, 0.0),
	array(0.0, 1.0, 0.0),
	array(0.0, 0.0, 1.0));
</pre></div>

<p>
	If the assignment statement involves 2 or more variables
	<code>$v1 = $v2 = $v3 = EXPR;</code>
	in a list of comma separated assignments, then the same DocBlock applies
	to all these variables.
</p>


<h3>Documenting a function</h3>

<p>
	The DocBlock of a function MUST always declare unhandled errors and
	uncaught checked exceptions using the <code>@triggers E_XXXXX</code> and
	the <code>@throws SomeException</code> line tags. Also the mandatory
	arguments, those that have not a default value, MUST be declared
	with a <code>@param TYPE $name</code> line tag. Usually, the return
	type is always guessed automatically by PHPLint.
	Examples:
</p>


<div class="code_box"><pre>
/**
 * Returns the area of the circle given its radius.
 * &lt;b&gt;Attention!&lt;/b&gt; This function performs the
 * calculation using the popular, approximated value of PI.
 * @param float $r Radius of the circle. Must be non-negative.
 * @return float Area of the circle.
 * @throws \InvalidArgumentException Negative radius.
 */
function circle_area($r){
	if( $r &lt; 0.0 )
		throw new \InvalidArgumentException("r=$r");
	return PI_POPULAR * $r * $r;
}
</pre></div>

<p>
	In normal situations, PHPLint can guess the return type from the first
	<code>return EXPR;</code> statement it encounters in the body of the
	function, but there may be cases in which this guess may fail and an
	error is signaled, for example on recursive functions or when
	class autoloading on mutually dependent packages is triggered
	(for example, the body of the function references a class that gets
	loaded by the autoloader, and in turn this class calls the function).
	In some others cases you may want to provide a <code>@return TYPE</code>
	line-tags anyway to direct the IDE, which might not be so smart to
	guess this information from the code.
</p>

<p>
	In the example above, the function may throw the unchecked exception
	<code>InvalidArgumentException</code>. It is not mandatory to declare the
	unchecked exceptions, but here it has been specified just to document
	what happen if the client program violates the contract of the
	interface (the argument must be non-negative).
</p>

<p>
	Note that a <code>@access private</code> line tag can be added to functions
	that are private to the file: these private functions cannot be called
	from the other packages.
</p>

<p>PHP 5 and PHP 7 type-hints can be used as well, so for example the function above becomes:</p>

<div class="code_box"><pre>
/**
 * @throws \InvalidArgumentException Negative radius.
 */
function circle_area(float $r): float
{
	...
}
</pre></div>

<p>
Note that we still have to provide a DocBlock just to the pourpose to declare the
exception this function can throw. In general DocBlocks are mandatory to properly
document the meaning of each argument and each returned value; in this case the
types declared in the DocBlock must match exactly the types declared through
type-hints or PHPLint will complain.
</p>


<h3>Documenting a class</h3>

<p>
	Classes and interfaces can be documented as well. There are no mandatory
	line-tags here, but <code>@author NAME</code> and <code>@version VER</code>
	are very common. Example:
</p>


<div class="code_box"><pre>
/**
 * Input stream of bytes. Possible implementations of this abstract class
 * may provide, for example, access to the file system or to data in memory.
 *
 * @author Umberto Salsi &lt;salsi@icosaedro.it&gt;
 * @version $Date: 2019/02/06 09:40:46 $
 */
abstract class InputStream {
	...
}
</pre></div>


<h3>Documenting a class constant</h3>

<p>
	There are no mandatory line tags. The type of the constant is guessed
	from the expression assigned.
	Example:
</p>


<div class="code_box"><pre>
/**
 * Popular value of "PI".
 */
const PI_POPULAR = 3.14;
</pre></div>

<p>
	If the <code>const</code> statement defines 2 or more constants
	in a list of comma separated assignments, then the same DocBlock applies
	to all these constants; each constant may have its own different type.
</p>


<h3>Documenting a property</h3>

<p>
	In PHPLint, properties of the simple type boolean, int and float
	MUST always be initialized to some value. This is required because
	PHP would otherwise initialize them to the NULL value, which is forbidden
	for those types under PHPLint. The type of these properties can then be
	guessed by PHPLint from the type of the expression assigned, so a
	<code>@var TYPE</code> is not required here and can be omitted.
</p>
<p>
	The <code>@var TYPE</code> line tag is not mandatory and can be
	added to define the detailed structure of the type when it cannot be
	guessed from the type of the expression.
	Examples:
</p>


<div class="code_box"><pre>
/**
 * Current number of records read.
 */
public $record_read_no = 0;

/**
 * Collected users' names as UTF-8 strings.
 * @var string[int]
 */
public $users_names = array();

/**
 * Peer input socket. Its initial value is NULL.
 * @var resource
 */
private $peer_in_socket;

/**
 * Collected exceptions to be reported at the end of the program.
 * @var Exception[int]
 */
private $exceptions = array();

/**
 * Rotational 3x3 matrix.
 */
private $rotation = array(
	array(1.0, 0.0, 0.0),
	array(0.0, 1.0, 0.0),
	array(0.0, 0.0, 1.0));
</pre></div>

<p>
	In the examples above, note that <code>$record_read_no</code> has an
	initial value <code>0</code> from which PHPLint guesses the type of the
	property, that is <code>int</code>.
</p>

<p>
	<code>$users_names</code>, instead, is initialized to an empty array
	<code>array()</code>, so that an explicit declaration of type
	<code>string[int]</code> is required to specify that the
	keys of the array are <code>int</code> numbers and the elements are
	<code>string</code>s. Without this explicit declaration of type, the
	resulting array would be a generic <code>mixed[]</code> because
	PHPLint cannot otherwise guess the structure from an empty array.
</p>

<p>
	<code>$rotation</code> is initialized with a non-empty array from which
	PHPLint can guess the type <code>float[int][int]</code>. No explicit
	type declaration is required in this case.
</p>

<p>
	If the assignment statement lists 2 or more properties, for example
	<code>public $p1, $p2 = EXPR, $p3;</code>
	then the same DocBlock applies
	to all these variables and all the variables MUST have the same exact
	type; if their type is boolean or numeric, an initial value MUST be
	indicated.
</p>

<p>As of PHP 7.4, type-hints are allowed in class properties. Here too, DocBlocks may or may not declare the type again, but if they do, the type in the annotation must match the type-hint:</p>


<div class="code_box"><pre>
/**
 * Current parth for temporary files.
 * @var string
 */
private string $tmp;
</pre></div>


<h3>Documenting a method</h3>

<p>
	The DocBlock of a method follows the same rules we already saw for a normal
	function:
</p>


<div class="code_box"><pre>
/**
 * Returns the area of the circle given its radius.
 * &lt;b&gt;Attention!&lt;/b&gt; This function performs the
 * calculation using the popular, approximated value of PI.
 * @param float $r Radius of the circle.
 * @return float Area of the circle.
 * @throws \InvalidArgumentException Negative radius.
 */
public static function circle_area($r){
	if( $r &lt; 0.0 )
		throw new \InvalidArgumentException("r=$r");
	return self::PI_POPULAR * $r * $r;
}
</pre></div>



<h2>Supported line tags</h2>

<p>
The syntax of every line tag is described with the aid of these definitions:
</p>

<blockquote>

	<p>
	<b>WORD</b> is any sequence of characters not including spaces,
	tabulations an new-lines. WORDs are rendered literally.
	</p>

	<p>
	<b>$VAR</b> is the name of a variable. Note that the dollar sign
	is required.
	</p>

	<p>
	<b>TEXT</b> is any text, possibly spanning on several lines up to
	the next line tag or the end of the DocBlock. A TEXT is rendered
	literally.
	</p>

	<p>
	<b>DESCR</b> is an HTML text, and the subset of tags already listed
	for the long description are allowed. The DESCR can span several
	lines up to the next line tag or the end of the DocBlock.  A DESCR
	enclosed between square parenthesis [DESCR] is optional.
	</p>

</blockquote>

<p>
The following table summarizes all the available line tags, their syntax,
and the context where they are legal, that is for which named items the line-tag
can be used; "always" means for any item, that is any package, constant,
global variable, function, interface, class, class constant, property and method.
</p>

<pre>

</pre>

<table align=center border=1 cellpadding=3 cellspacing=0 width="70%">
<tr>
	<th>Line tag</th>
	<th>Applicable to:</th>
	<th>Description</th>
</tr>
<tr>
	<td><code>@access&nbsp;private</code></td>
	<td>constant, global variable, function, class, class constant</td>
	<td valign=top>Allows to make the item private to the file (aka "package" in
		the PHPLint terminology) so it cannot be used elsewhere.</td>
</tr>
<tr>
	<td><code>@author&nbsp;<i>TEXT</i></code></td>
	<td>(always)</td>
	<td valign=top>Name of the author to be reported in the document.</td>
</tr>
<tr>
	<td><code>@copyright&nbsp;<i>DESCR</i></code></td>
	<td>(always)</td>
	<td valign=top>Copyright statement to be reported in the document.</td>
</tr>
<tr>
	<td><code>@deprecated&nbsp;<i>DESCR</i></code></td>
	<td>(always)</td>
	<td valign=top>Error message to be reported if the item is used anywhere
	outside its package. Obsolete, not supported or unsafe items should be
	marked with this line-tag.</td>
</tr>
<tr>
	<td><code>@license&nbsp;[<i>TEXT</i>]</code></td>
	<td>(always)</td>
	<td valign=top>License statement to be reported in the document.</td>
</tr>
<tr>
	<td><code>@link&nbsp;<i>WORD</i> [<i>TEXT</i>]</code></td>
	<td>(always)</td>
	<td valign=top>&nbsp;</td>
</tr>
<tr>
	<td><code>@package&nbsp;<i>WORD</i></code></td>
	<td>package</td>
	<td valign=top>Name of this package, reported as main title of the generated
	document. The presence of this line-tag makes the DocBlock related to the
	package and not to the following item.</td>
</tr>
<tr>
	<td><code>@param&nbsp;<i>TYPE</i>&nbsp;[&amp;]&nbsp;[...]&nbsp;<i>$VAR</i>&nbsp;[<i>DESCR</i>]</code></td>
	<td>function, method</td>
	<td valign=top>Declares the type of a function or method parameter.</td>
</tr>
<tr>
	<td><code>@return&nbsp;<i>TYPE</i>&nbsp;[<i>DESCR</i>]</code></td>
	<td>function, method</td>
	<td valign=top>Declares the type of the returned value from a function or
	method.</td>
</tr>
<tr>
	<td><code>@see <i>WORD</i></code></td>
	<td>(always)</td>
	<td valign=top>&nbsp;</td>
</tr>
<tr>
	<td><code>@since <i>DESCR</i></code></td>
	<td>(always)</td>
	<td valign=top>&nbsp;</td>
</tr>
<tr>
	<td><code>@triggers&nbsp;<i>WORD</i>&nbsp;[<i>DESCR</i>]</code></td>
	<td>function, method</td>
	<td valign=top>Declares an error that might be raised by this function or
	method, for example E_USER_NOTICE. All the errors raised MUST be declared.
	You may want to add even more errors to account for future development.
	Note that errors raised by concrete and abstract methods are inherited by
	overriding method and implementing methods. Vice-versa, overriding methods
	and implementation methods cannot raise more errors than those declared in
	their parent method.</td>
</tr>
<tr>
	<td><code>@throws&nbsp;<i>TYPE</i>&nbsp;[<i>DESCR</i>]</code></td>
	<td>function, method</td>
	<td valign=top>Declares an exception that might be thrown by this function
	or method. All the exceptions thrown MUST be declared. You may want to add
	even more exceptions to account for future development.
	Note that exceptions thrown by concrete and abstract methods are inherited by
	overriding methods and implementing methods. Vice-versa, overriding and
	implementing methods cannot throw more exceptions that those declared in
	their parent method.</td>
</tr>
<tr>
	<td><code>@todo <i>DESCR</i></code></td>
	<td>(always)</td>
	<td valign=top>&nbsp;</td>
</tr>
<tr>
	<td><code>@var&nbsp;<i>TYPE</i></code></td>
	<td>property</td>
	<td valign=top>&nbsp;</td>
</tr>
<tr>
	<td><code>@version&nbsp;<i>TEXT</i></code></td>
	<td>(always)</td>
	<td valign=top>&nbsp;</td>
</tr>
</table>

<p></p>

<p>
The supported TYPEs are described in the introductory chapter "Annotations".
</p>

<p>
PHPLint raises a notice if a line tags is used in the wrong context,
for example <code>@var</code> in a function description.
</p>

<p>
PHPLint raises an error if a DocBlock omits to declare the type of a
variable, function, argument, property or method when this type cannot
be guessed from the code.
</p>


<h2>The @triggers line tag</h2>

<p>
	This line-tag allows to declare all the errors the function or method
	may trigger. It is mandatory for functions and methods that may
	trigger unhandled errors, including <code>E_NOTICE</code>.
</p>
<p>
	If the mapping of errors into <code>ErrorException</code> is enabled,
	all the errors are assumed to be <code>ErrorException</code>.
	In this case, using that function or method requires to either
	capture the exception or declare the exception as thrown in the
	client code.
</p>
<p>
	Example:
</p>


<div class="code_box"><pre>
/**
 * Save data to file.
 * @param string $d Data to save.
 * @param string $fn Destination file name.
 * @triggers E_WARNING File access failure; data might not be
 * properly written or might not be written at all.
 */
function save_data($d, $fn){
	$f = fopen($fn, "wb");
	if( $f !== FALSE )
		fwrite($f, $d);
	fclose($f);
}
</pre></div>

<p>
	The following error labels are recognized:
	
		<code>E_ERROR</code>,
		<code>E_WARNING</code>,
		<code>E_PARSE</code>,
		<code>E_NOTICE</code>,
		<code>E_CORE_ERROR</code>,
		<code>E_CORE_WARNING</code>,
		<code>E_COMPILE_ERROR</code>,
		<code>E_COMPILE_WARNING</code>,
		<code>E_USER_ERROR</code>,
		<code>E_USER_WARNING</code>,
		<code>E_USER_NOTICE</code>,
		<code>E_STRICT</code>,
		<code>E_RECOVERABLE_ERROR</code>,
		<code>E_DEPRECATED</code>,
		<code>E_USER_DEPRECATED</code>,
		<code>E_ALL</code>.
</p>


<h2>The @throws line tag</h2>

<p>
The <code>@throws WORD [DESCR]</code> line tag allows to declare an exception
the function or the method may throw, where WORD is the name of the exception
and DESCR describes the conditions that causes this exception to be thrown:
</p>


<div class="code_box"><pre>
/**
 *  Return the size of the file. On 32-bit systems, this function
 *  returns the correct value also for files whose size is up to 4 GB.
 *
 *  @param string $filename  Path of the file.
 *
 *  @return float  Size of the file (bytes). Being a float, this value
 *                 may be greater than the maximum allowed for int.
 *
 *  @throws ErrorException  If an error occurs accessing the file.
 */
function BigFileSize($filename)
{
    $size = @filesize($filename);
    if( $size === FALSE )
        throw new ErrorException((string) error_get_last()['message']);
    if( $size &gt;= 0 )
        return (float) $size;
    else
        return (float) $size + 2.0 * (1.0 + PHP_INT_MAX);
}


interface MyCollection {

    /**
     *  Return the element of the given index in the list.
     *
     *  @param int $index  Index of the element.
     *
     *  @return mixed      The element.
     *
     *  @throws OutOfBoundException  If the $index is out of bound.
     *
     *  @throws ErrorException   Implementing methods may also throw this,
     *                           depending on the specific code that will
     *                           implement this method.
     */
    function getElement($index);

    ...
}
</pre></div>

<p>
All the checked exceptions a function or method may throw must be declared.
It is allowed to add also unchecked exceptions, but these exceptions are
reported in the generated documentation only if a descriptive text is also
provided; if no descriptive text is provided, the declaration of the unchecked
exception is parsed but it is otherwise completely ignored.
</p>

<p>
The programmer may still add more exceptions the are still not thrown, but that
might thrown later in some overriding or implementing method. In fact, as
explained in more details in the PHPLint manual, the list of thrown checked
exceptions is part of the method contract that implementing and overriding
methods must comply with. Basically, implementing and overriding methods can
only throw the same checked exceptions the original method throws, or even more
specialized exceptions derived from these. In other words, <b>implementing and
overriding methods cannot throw new, unrelated exceptions.</b>
</p>

<p>
In the document generated by PHPLint Documentator, thrown exceptions are always
listed in the order from more specialized ones to more general ones (that is,
parent classes) so to suggest to the programmer the proper order of the
<code>catch()</code> branches.
</p>



<h2>Namespaces and names resolution</h2>

<div class="note_box">
	<b>ATTENTION!</b><br>
	Namespaces are still not supported by the official phpDocumentor
	program, so what follows must be considered as an extension
	specific of PHPLint.
</div>

<p>
PHP 5.3 introduces the concept of namespaces with which, for example, the
<i>fully qualified name</i> of a class consists of one or more identifiers
separated by a back-slash character, like in this example:
<code>it\icosaedro\bignumbers\BigInt</code>. To be more precise, we will use
the following nomenclature with examples applied to the class above:
</p>

<blockquote>

<p>
The <b>fully qualified name (FQN)</b> of the class is a sequence of identifiers
separated by the back-slash character that univocally identify the item; you
may think at it as the real, complete name of the class or function:
<center><code>it\icosaedro\bignumbers\BigInt</code></center>

<p>
A <b>qualified name</b> is a sequence of two or more identifiers
separated by the back-slash character, that may represent only part of a FQN:
<center><code>bignumbers\BigInt</code></center>

<p>
The <b>absolute name</b> of the class is its FQN with a leading back-slash
appended to it: <center><code>\it\icosaedro\bignumbers\BigInt</code></center>

<p>
<b>Proper</b> name of the class is the last identifier of the FQN:
<center><code>BigInt</code></center>

</blockquote>


<p>
The <code>namespace\</code> operator can be used as abbreviation to reference an
item which is reachable from the current namespace and the name so generated
is considered absolute. For example, if the current namespace is
<code>it\icosaedro</code> then <code>namespace\bignumbers\BigInt</code> is the
absolute name of the intended item.
</p>

<p>
Incomplete names, that is qualified and bare identifiers, are also allowed
but a special resolution algorithm has to be applied in order to recover
the actual absolute name of the intended item. PHPLint applies the same
resolution algorithm the PHP interpreter applies. The only difference is
that PHPLint performs namespace resolution also in PHPLint meta-code and in
DocBlocks.
</p>

<p>
Then the <code>@param</code> line tag, the <code>@return</code> line tag and
the <code>{@link}</code> all can make reference to constants, functions and
classes using fully qualified names, qualified names, and bare identifiers.
Also the <code>namespace\</code> operator and the <code>use</code> clauses are
interpreted as usual.
</p>

<p>
There are only two restrictions to names that occurs in a DocBlock:
</p>

<ul>

<li>
<b>Spaces are not allowed within a fully qualified or qualified name.</b>
So for example <code>a&nbsp;\&nbsp;b</code> (allowed in PHP code)
must always be written as <code>a\b</code> without white spaces.
</li>

<li>
<b>Referred items must be already defined.</b> Since PHPLint is a single-pass
parser, it scans the source only once from the beginning to the end, and
it pretends every item be defined before it be used, and <i>used</i>
here includes also bare references in a DocBlock. The manual explains how
this eggs-and-chicken problem can be resolved either sorting declarations
in bottom-up order and possibly using <i>forward</i> declarations.
<br>
The only exception to this restriction is the <code>{@link}</code> in-line tag:
if the specified item is fully qualified, then it is resolved only after the
package has been completely parsed, so that, at least in this particular case,
forward references are allowed. Then <code>{@link&nbsp;namespace\x}</code>
or <code>{@link&nbsp;\a\b\c}</code> might be valid fully qualified references
to some item defined later in the package.
</li>

</ul>

<p>
The name resolution is performed in the same context of the DocBlock, so using
the same current namespace and the same list of <code>use</code> mappings. The
following example illustrate the issue with two DocBlocks, the first appears
before a namespace, and the second appears after the namespace:
</p>



<div class="code_box"><pre>
&lt;?php
/**
 *  DocBlock outside the namespace. The namespace below declared the class
 *  BigInt and the function One.  To refer to the class BigInt we must use a
 *  fully qualified name, for example {@link \it\icosaedro\bignumbers\BigInt}
 *  because this DocBlock is still in global namespace.
 * 
 *  Unqualified names as {@link BigInt} and qualified names as {@link
 *  bignumbers\One()} DOES NOT WORK and gives an error because it cannot be
 *  resolved in the context of this DocBlock, and because the `use' clauses
 *  below have a scope limited to their namespace.
 *
 *  Now the mandatory @package line tag, as usual, to give a name to this
 *  package:
 *  @package it/icosaedro/bignumbers/BigInt
 */

namespace it\icosaedro\bignumbers;

use it\icosaedro\bignumbers;

use it\icosaedro\bignumbers as BN;

class BigInt {
    # ...
}

/**
 *  Quite useless function that returns a cached BigInt(0).
 *
 *  @return BigInt
 *          Unqualified name here works, but also {@link bignumbers\BigInt}
 *          and {@link BN\BigInt} are allowed.
 *
 *  @throws \Exception  Inherited from BigInt for this and that reason.
 *          Useless (but allowed) leading back-slash.
 */
function Zero()
{
    static $zero = /*. (BigInt) .*/ NULL;
    if( $zero == NULL )
        $zero = new BigInt(0);
    return $zero;
}
</pre></div>

<p>
And here is how a possible client package might use the package above:
</p>



<div class="code_box"><pre>
&lt;?php

require_once __DIR__ . "/../../bignumbers/BigInt.php";

namespace it\icosaedro\stats\Test;
use it\icosaedro\bignumbers\BigInt;
use it\icosaedro\bignumbers as BN;

/**
 *  This package performs simple statistical calculations using
 *  big numbers from the {@link BigInt} class.
 *
 *  @package it\icosaedro\stats\Test
 */

/**
 *  Calculates the arithmetic mean between {@link BigInt} numbers.  This link
 *  can be resolved using the first "use" clause.  With the second "use"
 *  clause we might also write {@link BN\BigInt} but it is mostly useful to
 *  build short names of non-class items like the {@link BN\Zero()} function.
 *  Without any "use" clause we would need to write the fully qualified name
 *  {@link \it\icosaedro\bignumbers\BigInt}.
 *
 *  @param array[]BN\BigInt $a  One, two or more numbers.
 *
 *     Illustrates how the second "use" clause can be used to
 *     resolve the name. A bare BigInt[] would be sufficient
 *     because we have imported the class with the first "use".
 *
 *  @return it\icosaedro\bignumbers\BigInt   The arithmetic mean.
 *
 *     Here too, a bare BigInt would be sufficient.
 */
function Mean($a)
{
    $n = count($a);
    $sum = $a[0];
    for( $i = 1; $i &lt; $n; $i++ )
        $sum = $sum->add($a[$i]);
    return $sum->div( new BigInt($n) );
}
</pre></div>


<p>
Summarizing, fully qualified, qualified and unqualified names of constants,
functions and classes may appear in the <code>{@link}</code> in line tag and in
the <code>@param</code> and <code>@return</code> line tags as class names, and
in all these cases namespace resolution algorithm applies.
</p>

<p>
All the items parsed by PHPLint are reported in the generated document
with their fully qualified names.
</p>

<p>
Namespaces declarations by themselves are not reported and cannot be documented
with a DocBlock.
</p>



<h2>Supported in-line tags</h2>

<p>
The sequence of characters <code>{@</code> has a special meaning as it
is the beginning of an inline tag. The general syntax of an inline tag
is as follows:
</p>

<blockquote>
<code>{@</code><i>TAG</i><code>}</code>
</blockquote>

<p>
Some in-line tags may have one or more arguments separated by one or more
spaces, tabulator characters or line feed; the general structure of an
inline tag requiring arguments is a follows:
</p>

<blockquote>
<code>{@</code><i>TAG ARG1 ARG2 ... ARGn</i><code>}</code>
</blockquote>

<p>
Inline tags are allowed in the short description, in the long description, and
in the descriptive text of line tags that have a descriptive text. Inline tags
are not allowed, that is are passed verbatim, in any other location.
</p>

<p>
The inline tags PHPLint supports are listed below:
</p>

<dl>

<dt>
<b><code>{@}</code></b>
</dt>
<dd>
This tag allows to insert the sequence of characters <code>{@</code>
that would be otherwise forbidden because them are reserved to start
an inline tag.
</dd>

<dt>
<b><code>{@*}</code></b>
</dt>
<dd>
This tag allows to insert the sequence of characters <code>*/</code>
that would be otherwise forbidden in a multi-line comment. It is mostly
useful when a long chunk of code has to be inserted into the text.
</dd>

<dt>
<b><code>{@link</code></b> <i>ITEM</i><code><b>}</b></code><br>
<b><code>{@link</code></b> <i>ITEM HTML</i><code><b>}</b></code><br>
<b><code>{@link</code></b> <i>URL</i><code><b>}</b></code><br>
<b><code>{@link</code></b> <i>URL HTML</i><code><b>}</b></code>
</dt>
<dd>
This tag allows to insert an hypertext link to some documented item
(constant, variable, function, etc.) or to some generic resource available
in Internet through an URL. <i>ITEM</i>s can be specified using their name,
for example:

<blockquote>

<p>
<code>{@link M_PI}</code><br>
inserts a reference to the constant <code>M_PI</code>.
</p>

<p>
<code>{@link $varName}</code><br>
inserts a reference to the global variable
<code>$varName</code>. Note that the <code>$</code> symbol is mandatory.
Variables that are local to a function or method and formal arguments of
function and method cannot be referenced.
</p>

<p>
<code>{@link funcName()}</code><br>
inserts a reference to the function
<code>funcName()</code>. Note that the parentheses are mandatory as them
allows to distinguish between constants and functions. You may also add
specific arguments inside the parentheses, but still spaces are not allowed.
For example you may write <code>{@link&nbsp;tan(M_PI)}</code>.
If the function belongs to a namespace, the fully qualified name must be
reported.
</p>

<p>
<code>{@link SomeClass}</code><br>
inserts a reference to the class or interface <code>SomeClass</code>.
If the class belongs to a namespace, the fully qualified name must be
reported.
</p>

<p>
<code>{@link SomeClass::SOME_CONST}</code><br>
inserts a reference to the class constant <code>SomeClass::SOME_CONST</code>.
If the class belongs to a namespace, the fully qualified name must be
reported.
</p>

<p>
<code>{@link SomeClass::$aProperty}</code><br>
inserts a reference to the property <code>SomeClass::$aProperty</code>.
</p>

<p>
<code>{@link SomeClass::aMethod()}</code><br>
inserts a reference to the method <code>SomeClass::aMethod()</code>.
Between parentheses, you may enter some specific actual argument just like
already explained for functions.
If the class belongs to a namespace, the fully qualified name must be
reported.
</p>

</blockquote>

<p>
In DocBlocks related to a class, <code>self</code> and <code>parent</code> are
recognized, or the name of the class name itself can be omitted at all
so bringing to these shorter references:
</p>

<blockquote>

<p>
<code>{@link ::SOME_CONST}</code><br>
inserts a reference to the class constant <code>SOME_CONST</code>
defined inside the same class to which the DocBlock belongs.
</p>

<p>
<code>{@link ::$aProperty}</code><br>
inserts a reference to the property <code>$aProperty</code>
defined inside the same class to which the DocBlock belongs.
</p>

<p>
<code>{@link ::aMethod()}</code><br>
inserts a reference to the method <code>aMethod()</code>
defined inside the same class to which the DocBlock belongs.
</p>

</blockquote>

<p>
The ITEMs that can be referenced are only those that are available in the
current package, including imported standard modules (see
<code>require_module</code>) and imported packages (see
<code>require_once</code>).
Instead, ITEMs that are not accessible from the current package cannot be
referenced directly but, if really needed, a full URL or a relative path can be
provided instead.
</p>

<p>
In-line tags are resolved by the PHPLint Documentator while generating the HTML
file. At that time, all the items collected from the source are available, so
any item, also those defined <u>after</u> the in-line tag itself, can be
referenced. This offers a more freedom and flexibility. For example, the
DocBlock describing a class can make reference to any of its methods that are
defined only below that DocBlock.
</p>

<p>
Private items cannot be referenced.
</p>

<p>
The <code>{@link}</code> in-line tag also allows to insert links either to local
file or to remote resources. To avoid URLs and file paths be confused with PHP
documented items, URLs must always indicate the protocol used and file paths
must always be indicated as relative to the directory of the current document
file or as absolute path. For example:
</p>

<blockquote>

<p>
<code>{@link ftp://sources.company.com/myproject/package-1.0.zip}</code><br>
<code>{@link http://www.company.com/}</code><br>
<code>{@link https://www.company.com/}</code><br>
<code>{@link mailto:bugs@company.com Please, send bug reports here}</code><br>
<code>{@link ./anotherPackage.htm}</code><br>
<code>{@link ../otherLib/otherPackage.htm}</code><br>
</p>

</blockquote>

</dd>


<dt>
<b><code>{@img URL}</code></b>
</dt>
<dd>
This tag allows to insert an image. This tag is an extension specific of
PHPLint and may be incompatible with other documentation systems.
</dd>

</dl>

<p>
Unsupported in-line tags <code>{@example} {@internal} {@inheritdoc}
{@source} {@tutorial}</code> are reported verbatim.
Invalid in-line tags are reported verbatim but signaled as errors.
</p>

<p>
Nested in-line tags are not allowed.
</p>

<p>
Absolute file paths <code>C:/xxx</code> or <code>/user/www</code> are not
recognized, only relative paths that starts with <code>./xxx</code> or
<code>../xxx</code> are. Note that the directory separator character is the
slash, NOT the back-slash, this latter being reserved to PHP namespaces.
</p>




<h2>Missing features and differences</h2>

<ul>

<li>
Some line tags are not allowed, either because they are still not supported, or
are now obsolete under PHP 5 and 7. These line-tags are recognized and rendered verbatim:
<code>
@abstract
@category
@example
@exception
@filesource
@final
@ignore
@internal
@method
@name
@property
@static
@staticvar
@subpackage
@tutorial
@uses
</code>.
</li>

<li>
Some in-line tags are still not supported, they are reported as "unsupported"
and rendered verbatim:
<code>
{@example} {@internal} {@inheritdoc} {@source} {@tutorial}
</code>
</li>

<li>
Different semantic for the <code>@package</code> line tag (in PHPLint it
is simply a PHP source file).
</li>

<li>
In the <code>@param</code> line tag, the name of the parameter is mandatory,
and it must start with the dollar sign "<code>$</code>". So these lines
<b>are not valid:</b>

<blockquote><pre>
@param int maxlen          (missing $)
@param $maxlen             (missing type)
@param $maxlen int         (TYPE/NAME exchanged)
</pre></blockquote>
</li>

<li>
The templates <code>/**#@+*/  /**#@-*/</code> are scanned but ignored.
</li>

<li>
<code>@author</code> line tag: text contained between &lt;&gt; is rendered
literally, not as email hyper-link.
</li>

<li>
The <code>include*()</code> and <code>require*()</code> statements cannot be
documented. PHPLint automatically lists packages imported with
<code>required_once()</code>.
</li>

<li>
The <code>@ignore</code> line tag is not supported. You can use the
<code>@access private</code> line tag instead with a similar effect.
</li>

</ul>

</BODY></HTML>
